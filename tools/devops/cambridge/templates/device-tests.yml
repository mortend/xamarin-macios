# Xamarin
#
# Template that contains the different steps required to run device
# tests. The template takes a number of parameters so that it can
# be configured for the different type of devices.
#
parameters:

- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

- name: testsLabels
  type: string 
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices. 

- name: disableProviCleanup
  type: boolean
  default: false

- name: clearProviCache
  type: boolean
  default: false

steps:

- checkout: self
- checkout: maccore
  persistCredentials: true

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./System.psm1
    Get-SystemInfo | Format-Table -Wrap -HideTableHeaders
    Write-Host "Env variables are:"
    Get-ChildItem env:
  displayName: 'Dump Environment'
  timeoutInMinutes: 1

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./System.psm1
    Clear-HD 
  displayName: 'Disk cleanup'
  timeoutInMinutes: 5

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./System.psm1
    Import-Module ./VSTS.psm1
    Import-Module ./GitHub.psm1
    if ( -not (Test-HDFreeSpace -Size 50)) {
      Set-GitHubStatus -Status "error" -Description "Not enough free space in the host." -Context "$Env:CONTEXT"
      New-GitHubComment -Header "Tests failed catastrophically" -Emoji ":fire:" -Description "Not enough free space in the host."
      Stop-Pipeline
    }
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    CONTEXT: ${{ parameters.statusContext}}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Check HD Free Space'
  timeoutInMinutes: 5

# if we got to this point, it means that we do have at least 50 Gb to run the test, should
# be more than enough, else the above script would have stop the pipeline
- bash: cd xamarin-macios && ./configure --enable-xamarin
  displayName: 'Enable Xamarin'
  timeoutInMinutes: 1

- bash: |
    set -x
    set -e
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision
    ./maccore/tools/install-qa-provisioning-profiles.sh -v 
  displayName: 'Add provisioning profiles'
  env:
    LOGIN_KEYCHAIN_PASSWORD: $(OSX_KEYCHAIN_PASS)

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./VSTS.psm1
    Import-Module ./GitHub.psm1
    Set-GitHubStatus -Status "error" -Description "Failed provisioning profiles." -Context "$Env:CONTEXT"
    New-GitHubComment -Header "Tests failed catastrophically" -Emoji ":fire:" -Description "Failed provisioning profiles."
    Stop-Pipeline
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    CONTEXT: ${{ parameters.statusContext}}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Notify failed provisioning'
  condition: failed() # we could not provisiong, we stop the pipeline, there is not point in doing anything else
  timeoutInMinutes: 5

- bash: make -C $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/ device-tests-provisioning.csx
  displayName: 'Generate Provisionator csx file'

# TODO: do not use a path with a user name!
- bash: rm -rf "/Users/xamarinqa/azdo/_work/_tool/provisionator"
  displayName: 'Nuke Provisionator Tool Cache'
  condition: ${{ parameters.clearProviCache }}

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision dependencies'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/device-tests-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./VSTS.psm1
    Import-Module ./GitHub.psm1
    Set-GitHubStatus -Status "error" -Description "Failed installing dependencies." -Context "$Env:CONTEXT"
    New-GitHubComment -Header "Tests failed catastrophically" -Emoji ":fire:" -Description "Failed installing dependencies."
    Stop-Pipeline
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    CONTEXT: ${{ parameters.statusContext}}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Notify failed installing dependecies'
  condition: failed() # we could not install the deps, set comments and leave
  timeoutInMinutes: 5

- pwsh : |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./System.psm1
    Clear-XamarinProcesses 
  displayName: 'Process cleanup'

- bash: |
    security set-key-partition-list -S apple-tool:,apple: -s -k $(OSX_KEYCHAIN_PASS) login.keychain
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  condition: succeededOrFailed() # we do not care about the previous process cleanup

- pwsh : |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./MLaunch.psm1
    Set-MLaunchVerbosity -Verbosity "1234567890"
  displayName: 'Make mlaunch verbose'
  condition: succeededOrFailed() # we do not care about the previous step 

- pwsh : |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./MLaunch.psm1
    Optimize-DeviceDiscovery 
  displayName: 'Fix device discovery (reset launchctl)'
  condition: succeededOrFailed() # making mlaunch verbose should be a non blocker

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./GitHub.psm1 
    Set-GitHubStatus -Status "pending" -Context "$Env:CONTEXT" -Description "Running device tests on $Env:CONTEXT"
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    CONTEXT: ${{ parameters.statusContext}}
    GITHUB_TOKEN: $(GitHub.Token)
  displayName: Set pending GitHub status
  continueOnError: true
  condition: succeededOrFailed() # re-starting the daemon should not be an issue
  timeoutInMinutes: 5

#- bash: |
#    set -x
#    set -e
#
#    cd $WORKING_DIR/xamarin-macios
#    make -C builds downloads -j || true
#    make -C builds .stamp-mono-ios-sdk-destdir -j || true
#
#    MONO_ENV_OPTIONS=--trace=E:all make -C tests vsts-device-tests
#  env:
#    WORKING_DIR: $(System.DefaultWorkingDirectory) 
#    TESTS_EXTRA_ARGUMENTS: ${{ parameters.testsLabels }}
#  displayName: 'Run tests'
#  timeoutInMinutes: 600

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tests
    New-Item -Path . -Name "TestSummary.md" -ItemType "file" -Value "# This is a test" 
    Add-Content -Path TestSummary.md -Value "Some useful data will go here." 

  displayName: Create fake results
  continueOnError: true
  condition: succeededOrFailed() # re-starting the daemon should not be an issue
  timeoutInMinutes: 5

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: TestSummary.md
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/GitHub.psm1 
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/VSTS.psm1 
    $resultsPath = [System.IO.Path]::Combine("$Env:SYSTEM_DEFAULTWORKINGDIRECTORY", "xamarin-macios/tests/TestSummary.md")

    if (-not (Test-Path $resultsPath -PathType Leaf)) {
      Set-GitHubStatus -Status "failure" -Description "Tests failed catastrophically on $Env:CONTEXT (no summary found)." -Context "$Env:CONTEXT"
      New-GitHubComment -Header "Tests failed catastrophically on $Env:CONTEXT (no summary found)." -Emoji ":fire:" -Description "Result file $resultsPath not found."
    } else {
      if (Test-JobSuccess -Status $Env:AGENT_JOBSTATUS) {
        Set-GitHubStatus -Status "success" -Description "Device tests passed on $Env:CONTEXT." -Context "$Env:CONTEXT"
        New-GitHubCommentFromFile -Header "Device tests passed on $Env:CONTEXT" -Description "Device tests passed on $Env:CONTEXT"  -Emoji ":white_check_mark:" -Path $resultsPath
      } else {
        Set-GitHubStatus -Status "failure" -Description "Device tests failed on $Env:CONTEXT." -Context "$Env:CONTEXT"
        New-GitHubCommentFromFile -Header "Device tests failed on $Env:CONTEXT" -Description "Device tests failed on $Env:CONTEXT" -Emoji ":x:" -Path $resultsPath
      }
    }
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    CONTEXT: ${{ parameters.statusContext}}
    GITHUB_TOKEN: $(GitHub.Token)
  displayName: 'Add summaries'
  condition: always()
  timeoutInMinutes: 1

- task: PublishTestResults@2
  displayName: 'Publish NUnit Device Test Results'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/vsts-*.xml'
    failTaskOnFailedTests: true
  continueOnError: true
  condition: succeededOrFailed()

- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: 'xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: HtmlReport
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    cd $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tools/devops/cambridge/templates/scripts/
    Import-Module ./System.psm1
    Clear-AfterTests
  displayName: 'Cleanup'
  continueOnError: true
  condition: always() # no matter what, includes cancellation